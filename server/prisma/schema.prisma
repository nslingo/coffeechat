generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String            @id @default(cuid())
  name              String
  email             String            @unique
  emailVerified     Boolean           @default(false)
  image             String?
  createdAt         DateTime          @default(now())
  updatedAt         DateTime          @updatedAt
  bio               String?
  profilePicture    String?
  averageRating     Float             @default(0)
  totalReviews      Int               @default(0)
  accounts         Account[] 
  messagesReceived Message[] @relation("MessageRecipient")
  messagesSent     Message[] @relation("MessageSender")
  postsCreated     Post[]    @relation("PostAuthor")
  reviewsReceived  Review[]  @relation("Reviewee")
  reviewsGiven     Review[]  @relation("Reviewer")
  sessions         Session[]

  @@index([email])
  @@index([emailVerified])
  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  accountId         String   @map("account_id")
  providerId        String   @map("provider_id")
  userId            String   @map("user_id")
  accessToken       String?  @map("access_token")
  refreshToken      String?  @map("refresh_token")
  idToken           String?  @map("id_token")
  accessTokenExpiresAt DateTime? @map("access_token_expires_at")
  refreshTokenExpiresAt DateTime? @map("refresh_token_expires_at")
  scope             String?
  password          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("accounts")
}

model Session {
  id        String   @id @default(cuid())
  userId    String   @map("user_id")
  token     String   @unique
  expiresAt DateTime @map("expires_at")
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([expiresAt])
  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime @map("expires_at")
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  @@index([identifier])
  @@index([expiresAt])
  @@map("verification")
}

model Post {
  id           String             @id @default(cuid())
  title        String             @db.VarChar(200)
  description  String
  type         PostType
  category     PostCategory
  subject      String             @db.VarChar(100)
  courseCode   String?            @db.VarChar(20)
  tags         String[]
  createdAt    DateTime           @default(now()) @map("created_at")
  updatedAt    DateTime           @updatedAt @map("updated_at")
  authorId     String             @map("author_id")
  availability PostAvailability[]
  author       User               @relation("PostAuthor", fields: [authorId], references: [id], onDelete: Cascade)

  @@index([type])
  @@index([category])
  @@index([subject])
  @@index([courseCode])
  @@index([authorId])
  @@index([createdAt])
  @@map("posts")
}

model PostAvailability {
  id       String @id @default(cuid())
  postId   String @map("post_id")
  day      String @db.VarChar(10)
  timeSlot String @db.VarChar(20)
  post     Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@index([postId])
  @@map("post_availability")
}

model Review {
  id         String   @id @default(cuid())
  reviewerId String   @map("reviewer_id")
  revieweeId String   @map("reviewee_id")
  rating     Int      @db.SmallInt // 1-5 rating constraint
  feedback   String?
  createdAt  DateTime @default(now()) @map("created_at")
  reviewee   User     @relation("Reviewee", fields: [revieweeId], references: [id])
  reviewer   User     @relation("Reviewer", fields: [reviewerId], references: [id])

  @@unique([reviewerId, revieweeId])
  @@index([revieweeId])
  @@index([rating])
  @@map("reviews")
}

model Message {
  id          String   @id @default(cuid())
  content     String
  senderId    String   @map("sender_id")
  recipientId String   @map("recipient_id")
  isRead      Boolean  @default(false) @map("is_read")
  createdAt   DateTime @default(now()) @map("created_at")
  recipient   User     @relation("MessageRecipient", fields: [recipientId], references: [id])
  sender      User     @relation("MessageSender", fields: [senderId], references: [id])

  @@index([senderId])
  @@index([recipientId])
  @@index([createdAt])
  @@index([isRead])
  @@map("messages")
}

enum PostType {
  TEACH
  LEARN

  @@map("post_type")
}

enum PostCategory {
  CAREER
  COURSEWORK
  HOBBIES

  @@map("post_category")
}

